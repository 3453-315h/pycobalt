if ($pycobalt_debug_on is $null) {
	$pycobalt_debug_on = false;
}

# Write debug message to console
sub debug {
	if ($pycobalt_debug_on) {
		println('[pycobalt debug] ' . $1);
	}
}

# Write message to console
sub msg {
	println('[pycobalt] ' . $1);
}

# Write error message to console
sub error {
	println('[pycobalt error] ' . $1);
}

# Write error message to console and exit
sub die {
	error($1);
	exit();
}

if (!$pycobalt_path) {
	$pycobalt_path = script_resource();
}
msg('include path is: ' . $pycobalt_path);

if (!-exists ($pycobalt_path . '/json.cna')) {
	die('could not find json.cna. check include path');
}

include($pycobalt_path . '/json.cna');

# For special serialization objects
# { name: handle }
%pycobalt_objects = %();

# Print a stacktrace (for debugging)
sub stacktrace {
	local('@stack $frame');

	@stack = [[Thread currentThread] getStackTrace];
	debug('Stack size: ' . size(@stack));
	for $frame (@stack) {
		debug($frame);
	}
}

# Write a message to a script
sub write_message {
	local('$handle $name $message %wrapper $marshalled');
	$handle = $1;
	$name = $2;
	$message = $3;

	if (-eof $handle) {
		# Handle is closed
		debug('EOF!');
		return;
	}

	%wrapper = %(name => $name, message => $message);
	$marshalled = '';
	$marshalled = tostring(new_jsonobject(%wrapper)) . "\n";
	#debug('sending ' . $marshalled);
	writeb($handle, $marshalled);
}

# Serialize non-primitive object references. This includes Java objects. Java
# objects are opaque to the Python side.
sub serialize_special {
	local('$arg $item $key $object_prefix $object_name @new_list %new_hash');

	$arg = $1;

	$object_prefix = '<<--pycobalt object-->> ';

	if (($arg isa ^String) || ($arg isa ^Long) || ($arg isa ^Integer) || ($arg isa ^Double)) {
		# primitive type, serializable by json
		#debug('primitive ' . $arg);
		return $arg;
	} else if ($arg isa typeOf(@()) || $arg isa ^CollectionWrapper) {
		#debug('recursing list ' . $arg);
		# recurse lists
		@new_list = @();
		foreach $item ($arg) {
			push(@new_list, serialize_special($item));
		}
		return @new_list;
	} else if ($arg isa typeOf(%())) {
		#debug('recursing map');
		# recurse hashes
		%new_hash = %();
		foreach $key => $item ($arg) {
			%new_hash[$key] = serialize_special($item);
		}
		return %new_hash;
	} else if ($arg is $null) {
		#debug('null');
		return $arg;
	} else {
		# TODO identityHashCode isn't quite safe enough. we need a better way to do this
		$object_name = [[$arg getClass] getName] . '_' . [System identityHashCode: $arg];
		if ($object_name in %pycobalt_objects) {
			debug('using existing java object named ' . $object_name);
		} else {
			debug('adding java object ' . $arg . ' with name ' . $object_name);
			%pycobalt_objects[$object_name] = $arg;
		}

		return $object_prefix . $object_name;
	}
}

# Turn a serialized object handle into the object name
sub resolve_object_handle {
	local('$object_prefix $object_name $handle');

	$handle = $1;
	$object_prefix = '<<--pycobalt object-->> ';

	if (left($handle, strlen($object_prefix)) eq $object_prefix) {
		$object_name = substr($handle, strlen($object_prefix));
		return $object_name;
	} else {
		return $null;
	}
}

# Deserialize non-primitive object references and Python callbacks.
sub deserialize_special {
	local('$arg $item $key $object_prefix $handle $object_name');
	local('$object $callback_prefix $callback @new_list %new_hash @args');

	$arg = $1;
	$handle = $2;

	$object_prefix = '<<--pycobalt object-->> ';
	$callback_prefix = '<<--pycobalt callback-->> ';

	if ($arg isa ^String) {
		if (left($arg, strlen($object_prefix)) eq $object_prefix) {
			# it's an object
			$object_name = substr($arg, strlen($object_prefix));
			$object = %pycobalt_objects[$object_name];
			if (!$object) {
				msg('could not find object ' . $object_name);
				return $arg;
			}
			debug('found object: ' . $object_name . ' - ' . $object);
			return $object;
		} else if (left($arg, strlen($callback_prefix)) eq $callback_prefix) {
			# it's a callback
			$callback_name = substr($arg, strlen($callback_prefix));

			$callback = lambda({
				@args = @_;
				# XXX stack is already overflowing when there are menu options and such
				# could possibly fork() here to create a new thread/stack
				#@args = serialize_special(@_);
				debug('calling callback: ' . $callback_name);
				%info = %(name => $callback_name, args => @args);
				write_message($callback_handle, 'callback', %info);
			}, $callback_handle => $handle, \$callback_name);

			return $callback;
		} else {
			return $arg;
		}
	} else if ($arg isa typeOf(@())) {
		# recurse lists
		@new_list = @();
		foreach $item ($arg) {
			push(@new_list, deserialize_special($item, $handle));
		}
		return @new_list;
	} else if ($arg isa typeOf(%())) {
		# recurse hashes
		%new_hash = %();
		foreach $key => $item ($arg) {
			%new_hash[$key] = deserialize_special($item, $handle);
		}
		return %new_hash;
	} else {
		return $arg;
	}
}

# Make menu
# Fields include:
#   - type: type of item
#   - name: name of item (or menu text)
#   - callback: callback (called before children are produced)
#   - children: child items
#
# Types include:
#   - popup
#   - menu
#   - item
#   - insert_menu
#   - separator
sub set_menu {
	local('%menu $child $callback @children');

	%menu = $1;

	debug('setting up menu ' . %menu);
	println();

	sub menu_callback {
		debug('in callback for ' . %menu);
		println();

		# Call the callback
		if ('callback' in %menu) {
			$callback = %menu['callback'];
			debug('calling callback ' . $callback);
			invoke($callback, @_);
		}

		# Deal with children
		if ('children' in %menu) {
			@children = %menu['children'];
			debug('children: ' . @children);
			foreach $child (@children) {
				debug('dealing with child ' . $child);
				println();
				set_menu($child);
			}
		}
	}

	if (%menu['type'] eq 'popup') {
		debug('making popup');
		popup(%menu['name'], lambda(&menu_callback, \%menu));
	} else if (%menu['type'] eq 'menu') {
		debug('making menu');
		menu(%menu['name'], lambda(&menu_callback, \%menu));
	} else if (%menu['type'] eq 'item') {
		debug('making item');
		item(%menu['name'], lambda(&menu_callback, \%menu));
	} else if (%menu['type'] eq 'insert_menu') {
		debug('making insert');
		insert_menu(%menu['name'], $1, $2, $3, $4, $5, $6);
	} else if (%menu['type'] eq 'separator') {
		debug('making separator');
		separator();
	} else {
		error('invalid menu type: ' . %menu['type']);
	}
}

# Handle a message
sub handle_message {
	local('$name $message $func $silent $fork');
	local('$i $ret %menu');

	$handle = $1;
	$name = $2;
	$message = $3;

	if ($name eq 'fork') {
		return true;
	} else if ($name eq 'message') {
		# print message
		println('[pycobalt script] ' . $message);
	} else if ($name eq 'debug') {
		# print debug message
		println('[pycobalt script debug] ' . $message);
	} else if ($name eq 'error') {
		# print error message
		println('[pycobalt script error] ' . $message);
	} else if ($name eq 'call') {
		# call a function
		$func = $message['name'];
		@args = $message['args'];
		$silent = $message['silent'];
		$fork = $message['fork'];
		$sync = $message['sync'];

		$closure_text = 'return ' . $func;

		# silent functions (e.g. bshell!())
		if ($silent) {
			$closure_text .= '!';
		}
		$closure_text .= '(';

		# add arguments (nothing like python's *args in sleep)
		for ($i = 1; $i < size(@args); $i++) {
			$closure_text .= '$' . $i . ',';
		}
		$closure_text .= '$' . $i . ');';

		# this deserializes special objects and callbacks and calls the closure
		sub closure_caller {
			# deserialize special objects
			# must be performed here so that the callback closures are created
			# in this thread.
			@args = deserialize_special(@args, $handle);

			debug('closure call: ' . $closure_text);
			debug('closure args: ' . @args);

			$closure = compile_closure($closure_text);
			$ret = invoke($closure, @args);
			$ret = serialize_special($ret);

			if ($sync) {
				# write return value
				write_message($handle, 'return', $ret);
			}
		}

		# call it
		if ($fork) {
			# fork it and call it
			debug('forking before calling function');
			fork(&closure_caller, \$closure_text, \@args, \$handle, \$pycobalt_path, \%pycobalt_objects, \$pycobalt_debug_on, \$sync);
		} else {
			# call it in this thread, and send return value
			closure_caller();
		}
	} else if ($name eq 'menu') {
		# create a menu
		debug('menu call: ' . $message);
		%menu = deserialize_special($message, $handle);
		debug('deserialized: ' . %menu);
		set_menu(%menu);
	} else if ($name eq 'delete') {
		# remove serialization reference to object. if it's the only reference
		# the object will be deleted.
		local('$handle')
		$handle = resolve_object_handle($message);

		if (!$handle) {
			debug('tried to delete something that is not an object: ' . $message)
			return;
		}

		if ($message in %pycobalt_objects) {
			debug('deleting object: ' . $handle);
			%pycobalt_objects[$handle] = $null;
		} else {
			debug('tried to delete non-existent object: ' . $handle)
		}
	} else if ($name eq 'eval') {
		# eval some code
		eval($message);
	} else {
		msg("unhandled message of type $name - " . $message);
	}
	return false;
}

# Per-script thread
sub thread_callback {
	local('$line $obj');

	while $line (readln($handle)) {
		$obj = from_json($line);

		if ($obj) {
			#debug('received ' . $obj);
			if (handle_message($handle, $obj['name'], $obj['message'])) {
				return true;
			}
		} else {
			msg('failed to parse json: ' . $line);
		}
	}

	msg('closing script ' . $script);

	if (!-eof $handle) {
		closef($handle);
	}

	return false;
}

# Start a Python script
sub python {
	local('$error');

	$script = $1;

	msg('executing script ' . $script);
	$handle = exec($script);
	if (checkError($error)) {
		msg("failed to execute script '" . $script . "': " . $error);
	}

	# run without forking first
	if (thread_callback()) {
		fork(&thread_callback, \$handle, \$script, \%pycobalt_objects, \$pycobalt_path, \$pycobalt_debug_on);
	}

	return $handle;
}

# Stop a Python script
sub python_stop {
	local('$handle');

	$handle = $1;

	closef($handle);
}

# Eval arbitrary code within a Python script
sub python_eval {
	local('$handle $code');

	$handle = $1;
	$code = $2;

	write_message($handle, 'eval', $code);
}
